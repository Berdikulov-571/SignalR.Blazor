@page "/groups/{GroupName}"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3>Group : @GroupName </h3>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="SendToGroup" disabled="@(!IsConnected)">Send</button>


<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string GroupName { get; set; }

    private List<string> messages = new List<string>();

    private string? userInput;
    private string? messageInput;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessageFromGroup", GetMessageFromGroup);

        await hubConnection.StartAsync();

        await hubConnection.InvokeAsync("JoinGroup", GroupName);
    }

    private void GetMessageFromGroup(string username, string message)
    {
        var encodedMsg = $"{username} : {message}";
        messages.Add(encodedMsg);
        InvokeAsync(StateHasChanged);
    }

    private async Task SendToGroup()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendToGroupMessage", GroupName, userInput, messageInput);
        }
        else
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
                .Build();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}